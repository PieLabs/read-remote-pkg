"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const log_factory_1 = require("log-factory");
const github_1 = require("./github");
const local_1 = require("./local");
const npm_1 = require("./npm");
const logger = log_factory_1.buildLogger();
function default_1(key, value) {
    const keyValue = { key, value };
    logger.debug('[read-remote-pkg] key: ', key, 'value: ', value);
    let viewers = [
        local_1.default,
        npm_1.default,
        github_1.default
    ];
    let compatible = _.filter(viewers, v => v.match(keyValue));
    logger.debug('compatible: ', compatible);
    let out = _.reduce(compatible, (acc, v) => {
        logger.silly('[info] acc: ', acc);
        logger.silly('[info] v: ', v);
        return acc.then(r => {
            if (r !== undefined) {
                return r;
            }
            else {
                return v.view(keyValue);
            }
        });
    }, Promise.resolve(undefined));
    return out
        .catch(e => {
        logger.error(e);
        logger.error(e.stack);
        throw new Error(`unable to find info for package pattern: ${keyValue}`);
    });
}
exports.default = default_1;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRCQUE0QjtBQUU1Qiw2Q0FBMEM7QUFDMUMscUNBQThCO0FBQzlCLG1DQUE0QjtBQUM1QiwrQkFBd0I7QUFFeEIsTUFBTSxNQUFNLEdBQUcseUJBQVcsRUFBRSxDQUFDO0FBYTdCLG1CQUF5QixHQUFXLEVBQUUsS0FBYTtJQUVqRCxNQUFNLFFBQVEsR0FBRyxFQUFFLEdBQUcsRUFBRyxLQUFLLEVBQUUsQ0FBQztJQUVqQyxNQUFNLENBQUMsS0FBSyxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFL0QsSUFBSSxPQUFPLEdBQWE7UUFDdEIsZUFBSztRQUNMLGFBQUc7UUFDSCxnQkFBTTtLQUNQLENBQUM7SUFFRixJQUFJLFVBQVUsR0FBYSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBRXJFLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRXpDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNmLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1gsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzFCLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFFL0IsTUFBTSxDQUFDLEdBQUc7U0FDUCxLQUFLLENBQUMsQ0FBQztRQUNOLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMxRSxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFsQ0QsNEJBa0NDO0FBQUEsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgYnVpbGRMb2dnZXIgfSBmcm9tICdsb2ctZmFjdG9yeSc7XG5pbXBvcnQgZ2l0aHViIGZyb20gJy4vZ2l0aHViJztcbmltcG9ydCBsb2NhbCBmcm9tICcuL2xvY2FsJztcbmltcG9ydCBucG0gZnJvbSAnLi9ucG0nO1xuXG5jb25zdCBsb2dnZXIgPSBidWlsZExvZ2dlcigpO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlld2VyIHtcbiAgdmlldyhwYXR0ZXJuOiBLZXlWYWx1ZSk6IFByb21pc2U8YW55IHwgdW5kZWZpbmVkPjtcbiAgbWF0Y2gocGF0dGVybjogS2V5VmFsdWUpOiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBLZXlWYWx1ZSA9IHtcbiAga2V5OiBzdHJpbmcsXG4gIHZhbHVlOiBzdHJpbmdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykgOiBQcm9taXNlPHt9PiB7XG5cbiAgY29uc3Qga2V5VmFsdWUgPSB7IGtleSAsIHZhbHVlIH07XG5cbiAgbG9nZ2VyLmRlYnVnKCdbcmVhZC1yZW1vdGUtcGtnXSBrZXk6ICcsIGtleSwgJ3ZhbHVlOiAnLCB2YWx1ZSk7XG5cbiAgbGV0IHZpZXdlcnM6IFZpZXdlcltdID0gW1xuICAgIGxvY2FsLFxuICAgIG5wbSxcbiAgICBnaXRodWJcbiAgXTtcblxuICBsZXQgY29tcGF0aWJsZTogVmlld2VyW10gPSBfLmZpbHRlcih2aWV3ZXJzLCB2ID0+IHYubWF0Y2goa2V5VmFsdWUpKTtcblxuICBsb2dnZXIuZGVidWcoJ2NvbXBhdGlibGU6ICcsIGNvbXBhdGlibGUpO1xuXG4gIGxldCBvdXQgPSBfLnJlZHVjZShjb21wYXRpYmxlLCAoYWNjLCB2KSA9PiB7XG4gICAgbG9nZ2VyLnNpbGx5KCdbaW5mb10gYWNjOiAnLCBhY2MpO1xuICAgIGxvZ2dlci5zaWxseSgnW2luZm9dIHY6ICcsIHYpO1xuICAgIHJldHVybiBhY2MudGhlbihyID0+IHtcbiAgICAgIGlmIChyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdi52aWV3KGtleVZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCkpO1xuXG4gIHJldHVybiBvdXRcbiAgICAuY2F0Y2goZSA9PiB7XG4gICAgICBsb2dnZXIuZXJyb3IoZSk7XG4gICAgICBsb2dnZXIuZXJyb3IoZS5zdGFjayk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuYWJsZSB0byBmaW5kIGluZm8gZm9yIHBhY2thZ2UgcGF0dGVybjogJHtrZXlWYWx1ZX1gKTtcbiAgICB9KTtcbn07XG4iXX0=
