"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const local_1 = require("./local");
const local_file_1 = require("./local-file");
const log_factory_1 = require("log-factory");
const github_1 = require("./github");
const npm_1 = require("./npm");
const logger = log_factory_1.buildLogger();
function default_1(key, value, dir) {
    const keyValue = { key, value };
    logger.debug('[read-remote-pkg] key: ', key, 'value: ', value, ' dir: ', dir);
    let viewers = [
        new local_file_1.default(dir),
        new local_1.default(dir),
        npm_1.default,
        github_1.default
    ];
    let compatible = _.filter(viewers, v => v.match(keyValue));
    logger.debug('compatible: ', compatible);
    let out = _.reduce(compatible, (acc, v) => {
        logger.silly('[info] acc: ', acc);
        logger.silly('[info] v: ', v);
        return acc.then(r => {
            if (r !== undefined) {
                return r;
            }
            else {
                return v.view(keyValue);
            }
        });
    }, Promise.resolve(undefined));
    return out
        .catch(e => {
        logger.error(e);
        logger.error(e.stack);
        throw new Error(`unable to find info for package pattern: ${keyValue}`);
    });
}
exports.default = default_1;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRCQUE0QjtBQUU1QixtQ0FBNEI7QUFDNUIsNkNBQXFDO0FBQ3JDLDZDQUEwQztBQUMxQyxxQ0FBOEI7QUFDOUIsK0JBQXdCO0FBRXhCLE1BQU0sTUFBTSxHQUFHLHlCQUFXLEVBQUUsQ0FBQztBQWE3QixtQkFBeUIsR0FBVyxFQUFFLEtBQWEsRUFBRSxHQUFXO0lBRTlELE1BQU0sUUFBUSxHQUFHLEVBQUUsR0FBRyxFQUFHLEtBQUssRUFBRSxDQUFDO0lBRWpDLE1BQU0sQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRTlFLElBQUksT0FBTyxHQUFhO1FBQ3RCLElBQUksb0JBQVMsQ0FBQyxHQUFHLENBQUM7UUFDbEIsSUFBSSxlQUFLLENBQUMsR0FBRyxDQUFDO1FBQ2QsYUFBRztRQUNILGdCQUFNO0tBQ1AsQ0FBQztJQUVGLElBQUksVUFBVSxHQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFFckUsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFekMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2YsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDWCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDMUIsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUUvQixNQUFNLENBQUMsR0FBRztTQUNQLEtBQUssQ0FBQyxDQUFDO1FBQ04sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQW5DRCw0QkFtQ0M7QUFBQSxDQUFDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgTG9jYWwgZnJvbSAnLi9sb2NhbCc7XG5pbXBvcnQgTG9jYWxGaWxlIGZyb20gJy4vbG9jYWwtZmlsZSc7XG5pbXBvcnQgeyBidWlsZExvZ2dlciB9IGZyb20gJ2xvZy1mYWN0b3J5JztcbmltcG9ydCBnaXRodWIgZnJvbSAnLi9naXRodWInO1xuaW1wb3J0IG5wbSBmcm9tICcuL25wbSc7XG5cbmNvbnN0IGxvZ2dlciA9IGJ1aWxkTG9nZ2VyKCk7XG5cblxuZXhwb3J0IGludGVyZmFjZSBWaWV3ZXIge1xuICB2aWV3KHBhdHRlcm46IEtleVZhbHVlKTogUHJvbWlzZTxhbnkgfCB1bmRlZmluZWQ+O1xuICBtYXRjaChwYXR0ZXJuOiBLZXlWYWx1ZSk6IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIEtleVZhbHVlID0ge1xuICBrZXk6IHN0cmluZyxcbiAgdmFsdWU6IHN0cmluZ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBkaXI6IHN0cmluZykgOiBQcm9taXNlPHt9PiB7XG5cbiAgY29uc3Qga2V5VmFsdWUgPSB7IGtleSAsIHZhbHVlIH07XG5cbiAgbG9nZ2VyLmRlYnVnKCdbcmVhZC1yZW1vdGUtcGtnXSBrZXk6ICcsIGtleSwgJ3ZhbHVlOiAnLCB2YWx1ZSwgJyBkaXI6ICcsIGRpcik7XG5cbiAgbGV0IHZpZXdlcnM6IFZpZXdlcltdID0gW1xuICAgIG5ldyBMb2NhbEZpbGUoZGlyKSxcbiAgICBuZXcgTG9jYWwoZGlyKSxcbiAgICBucG0sXG4gICAgZ2l0aHViXG4gIF07XG5cbiAgbGV0IGNvbXBhdGlibGU6IFZpZXdlcltdID0gXy5maWx0ZXIodmlld2VycywgdiA9PiB2Lm1hdGNoKGtleVZhbHVlKSk7XG5cbiAgbG9nZ2VyLmRlYnVnKCdjb21wYXRpYmxlOiAnLCBjb21wYXRpYmxlKTtcbiAgXG4gIGxldCBvdXQgPSBfLnJlZHVjZShjb21wYXRpYmxlLCAoYWNjLCB2KSA9PiB7XG4gICAgbG9nZ2VyLnNpbGx5KCdbaW5mb10gYWNjOiAnLCBhY2MpO1xuICAgIGxvZ2dlci5zaWxseSgnW2luZm9dIHY6ICcsIHYpO1xuICAgIHJldHVybiBhY2MudGhlbihyID0+IHtcbiAgICAgIGlmIChyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdi52aWV3KGtleVZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCkpO1xuXG4gIHJldHVybiBvdXRcbiAgICAuY2F0Y2goZSA9PiB7XG4gICAgICBsb2dnZXIuZXJyb3IoZSk7XG4gICAgICBsb2dnZXIuZXJyb3IoZS5zdGFjayk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuYWJsZSB0byBmaW5kIGluZm8gZm9yIHBhY2thZ2UgcGF0dGVybjogJHtrZXlWYWx1ZX1gKTtcbiAgICB9KTtcbn07XG4iXX0=
